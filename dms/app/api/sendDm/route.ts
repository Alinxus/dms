// /app/api/sendDms/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { chromium } from 'playwright';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import random from 'random';
import { JWT } from 'google-auth-library';


const creds = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT || '');
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});
const doc = new GoogleSpreadsheet('<the sheet ID from the url>', serviceAccountAuth); // Replace with your Google Sheet ID

await doc.loadInfo();
const sheet = doc.sheetsByTitle['Leads'];

export async function POST(req: NextRequest) {
  const { messagesList } = await req.json();

  try {
    const browser = await chromium.launch({ headless: false });
    const context = await browser.newContext();

    const cookiesFile = 'session.json';
    const savedCookies = require(`../../../${cookiesFile}`);
    await context.addCookies(savedCookies);

    const page = await context.newPage();
    await page.bringToFront();
    await page.goto('https://www.instagram.com/');
    await page.waitForTimeout(random.float(2000, 3000));

    await page.keyboard.press('Tab');
    await page.waitForTimeout(2000);
    await page.keyboard.press('Enter');
    await page.waitForTimeout(2000);

    const uniqueUsernames = await readAllDataFromSheet();
    let count = 0;
    await page.goto('https://www.instagram.com/direct/');

    for (const username of uniqueUsernames) {
      try {
        await page.waitForTimeout(random.float(3000, 4000));
        const message = messagesList[random.int(0, messagesList.length - 1)];
        const personalizedMessage = message.replace('{username}', username);
        count++;
        const divSelector = '.x6s0dn4.x78zum5.xdt5ytf.xl56j7k';
        const divElement = await page.$(divSelector);
        await divElement?.click();
        await page.waitForTimeout(random.float(4000, 5000));
        await page.keyboard.type(username);

        const selector = `span.x1lliihq.x1plvlek.xryxfnj:has-text('${username}')`;
        await page.waitForSelector(selector, { state: 'visible', timeout: 10000 });
        await page.waitForTimeout(random.float(1000, 2000));
        await page.click(selector);
        await page.waitForTimeout(random.float(1000, 2000));
        await pressTabNTimes(page, 5);
        await page.keyboard.press('Enter');
        await page.waitForTimeout(random.float(1000, 2000));
        await page.keyboard.type(personalizedMessage);
        await page.waitForTimeout(random.float(2000, 4000));
        await page.keyboard.press('Enter');
        await page.waitForTimeout(random.float(2000, 4000));

        console.log(`Message Sent to ${username}`);
        await enterDataInSheetSuccess(username);
        await removeFirstLineFromSheet();

      } catch (error) {
        console.log(`Unable to message ${username}, moving on...`);
        await enterDataInSheetFail(username);
        await removeFirstLineFromSheet();
        await page.goto('https://www.instagram.com/direct/');
      }
    }

    await browser.close();
    return NextResponse.json({ success: true, message: 'Messages sent successfully' });

  } catch (error) {
    console.error('Error sending Instagram DMs:', error);
    return NextResponse.json({ success: false, error: error });
  }
}

async function readAllDataFromSheet() {
  const rows = await sheet.getRows();
  return rows.map((row: any) => row._rawData[0]);
}

async function enterDataInSheetSuccess(username: string) {
  const sheet = doc.sheetsByTitle['DM Sent'];
  await sheet.addRow([username]);
}

async function enterDataInSheetFail(username: string) {
  const sheet = doc.sheetsByTitle["Can't Send DM"];
  await sheet.addRow([username]);
}

async function removeFirstLineFromSheet() {
  const rows = await sheet.getRows();
  await rows[0].delete();
}

async function pressTabNTimes(page: any, n: number) {
  for (let i = 0; i < n; i++) {
    await page.keyboard.press('Tab');
    await page.waitForTimeout(random.float(100, 500));
  }
}
